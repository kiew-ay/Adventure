@startuml
' Packages for the Adventure RPG

'===============================================================================
' SKINPARAMS
'-------------------------------------------------------------------------------
skinparam class {
    BorderColor<<Module>> Gray
    BackgroundColor<<Module>> LightGray
}
skinparam object {
    BorderColor Black
    BackgroundColor Violet
}


'===============================================================================
' PACKAGES
'-------------------------------------------------------------------------------
'_______________________________________________________________________________
package "Mission Creation" <<Cloud>> #Wheat {
    '_______________________________________________________________________________
    package Character <<Folder>> {
        '----------------------------------
        class Character {
            self.name : ''
            self.image : ''
            self.hp : 100
            self.skills : []
            self.inventory : []
            self.hp_plus(amount)
            self.hp_minus(amount)
        }
        class Protagonist {
            self.body_type : ''
            self.mind_type : ''
            self.hp_plus(amount)
            self.hp_minus(amount)
            self.add_to_inventory(item)
            self.remove_from_inventory(item)
        }
        class Enemy {
            self.hp_plus(amount)
            self.hp_minus(amount)
        }
        Character <|-- Protagonist
        Character <|-- Enemy

        '----------------------------------
        class Skill {
            self.name : ""
            self.description : ""
            self.description_format : ""
            self.do()
        }
        class Punch {
            self.damage : 10
        }
        Character *. "*" Skill
        Skill <|-- Punch

        '----------------------------------
        class Interactible {
            self.name : ""
            self.description: ""
            self.interactions : []
            self.inspect()
        }
        class Item {
            self.pick_up()
            self.use()
        }   
        class Door {
            self.rooms = [room1, room2]
            self.key : None
            self.status : (closed, unlocked)
            self.unlock()
            self.open()
            'toggle current_room between rooms in self.rooms
            self.go_through(): Toggle current_room
        }
        Interactible *. "*" Skill
        Interactible <|-- Item
        Interactible <|-- Door
    }

    '_______________________________________________________________________________
    package Setting <<Folder>> {
        class Room {
            self.contents : []
            self.doors : []
            self.discovered : False
            self.describe()
        }

        class Map {
            self.draw_map()
            self.draw_room()
            self.draw_minimap()
        }
    }

    '_______________________________________________________________________________
    package Plot <<Folder>> {
        class Checker {
            self.win_conditions : []
            self.lose_conditions : []
            self.trigger_events : []

            self.add_win_condition()
            self.add_lose_condition()
            self.check_win_conditions()
            self.check_lose_conditions()
            self.check_trigger_conditions()

            self.victory()
            self.failure()
        }

        '----------------------------------
        abstract class Condition {
            die()
            is_in()
            less_than()
            greater_than()
            equal_to()
            less_than_or_equal_to()
            greater_than_or_equal_to()
        }
    }
}


'_______________________________________________________________________________
package Mission <<Node>> #BUSINESS {
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '' The mission file instantiates everything that will exist in the mission.
    ''      - characters (hero, enemies, etc.)
    ''      - map (rooms, doors, and layout)
    ''      - items
    ''      - plot (win/lose conditions, trigger conditions, etc.)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    object hero
        Protagonist <|-- hero

    object skeleton
        Enemy <|-- skeleton

    object punch
        Punch <|-- punch

    object diamond
        Item <|-- diamond

    object key
        Item <|-- key

    object room_1
        Room <|-- room_1

    object room_2
        Room <|-- room_2

    object door_1_2
        Door <|-- door_1_2

    object map
        Map <|-- map

    object plot_checker
        Checker <|-- plot_checker
}


'_______________________________________________________________________________
package "Gameplay" <<Cloud>> #GreenYellow {
    '_______________________________________________________________________________
    package Conflict <<Folder>> {
        class Conflict {
            self.character_1
            self.character_2
            self.main()
            self.display_options()
            self.process_interaction()
            self.summarize_conflict()
        }

        'class ConflictManager {
        '    generate_conflict()
        '}
    }
    object conflict
    Conflict <|-- conflict
    'ConflictManager ..> conflict

    '_______________________________________________________________________________
    package UserInterface <<Folder>> {
        abstract class UI {
            system : 'Linux'
            describe_setting()
            prompt("question")
            prompt_bool("question")
            prompt_list("question", options_list=[])
            prompt_dict("question", options_dict={})
        }

        abstract class Visualizer {
            draw_screen()
        }
    }

    '_______________________________________________________________________________
    package WorldCreator <<Folder>> {
        class Init <<Module>> {
            ' VARIABLES
            current_location = Mission.STARTING_LOCATION
            hero = Mission.hero

            ' METHODS
            import_mission_file()
        }

        '----------------------------------
        class Main <<Module>> {
            ' VARIABLES
            inventory : []
            current_room : room_1
            game_state : {}

            ' METHODS
            draw_scene()
            prompt_user()
            generate_conflict()
            modify_stats()

        }
    }
}


'===============================================================================
' FORMATTING & LAYOUT
'-------------------------------------------------------------------------------
'_______________________________________
'           MISSION CREATION
'---------------------------------------
' Align vertically: "Mission Creation", Mission, "Gameplay"
"Mission Creation" -down[hidden]-> Mission
Mission -down[hidden]-> "Gameplay"

' Align horizontally: Character, Settings, Plot
Character -[hidden]> Setting
Setting   -[hidden]> Plot

' Align Character above Enemy
Character -[hidden]-> Enemy

' Align Character over WorldCreator
Character -[hidden]-> WorldCreator

'_______________________________________
'           MISSION
'---------------------------------------
note right of Mission
    <b>Mission</b> instantiates all objects in the mission
    using the classes defined in <b>Mission Creation</b>
end note

' Align Mission over WorldCreator
note "<b>WorldCreator</b> imports <b>Mission</b>" as MissionImportNote
Mission .left[hidden]. MissionImportNote 
MissionImportNote .. WorldCreator


'_______________________________________
'           GAMEPLAY
'.......................................
' Align horizontally: UserInterface, Conflict
UserInterface -[hidden]> Conflict


'_______________________________________
' MISCELLANEOUS FORMATTING
'.......................................
' don't display the circle or stereotype name for these skinparams
hide <<Module>> circle
hide <<Module>> stereotype
hide <<Object>> circle
hide <<Object>> stereotype
'===============================================================================
@enduml
